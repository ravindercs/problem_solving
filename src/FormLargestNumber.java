package com.ood.di;

import java.util.Arrays;
import java.util.Scanner;

/**
 * Created by ravinderk on 6/22/2017.
 */
public class FormLargestNumber {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        while (t-->0) {
            int n = s.nextInt();
            Integer[] a = new Integer[n];
            for(int i = 0 ; i < n; i++) {
                a[i] = s.nextInt();
            }

            Arrays.sort(a, (fn,sn) -> {
                        String fs = fn.toString();
                        String ss = sn.toString();

                        int l = fs.length() < ss.length() ? fs.length() : ss.length();
                        int fi = 0;
                        int si = 0;

                        while (true) {
                            for (; fi < fs.length() && si < ss.length(); ) {
                                if (fs.charAt(fi) != ss.charAt(si)) {
                                    return fs.charAt(fi) - ss.charAt(si);
                                }
                                fi++;
                                si++;
                            }

                            if (fi < fs.length()) {
                                si = 0;
                            } else if (si < ss.length()) {
                                fi = 0;
                            } else {
                                break;
                            }
                        }
                        return 0;
                    });

            StringBuilder sb = new StringBuilder();
            for (int i = n-1; i >= 0; i--) {
                sb.append(Integer.toString(a[i]));
            }
            System.out.println(sb.toString());
            System.out.println(sb.toString().equals("98980968945929048278228178117467096736696345805315134914863943583373362792682292197195154150125100"));
            System.out.println(sb.toString().equals("999739695948906902845845832822814791777176876173973971369668067264162461759159158551540535507497455395386386367364336320290273248239227224221218160127124"));
        }
    }
}
/*
624 421 145 969 736 916 626 535 43 12 680 153 245 296 819 397 693 816 992 34 670 398 554 548 826 211 663 212 809 378 762
 626 336 869 996 777 768 440 875 332 557 302 873 561 95 985 756 790 408 16 194 770 681 456 856 507 964 503 677 109 250
  332 845 639 809 998 652 850 204 732 532 15 420 776 10 181 930 224 55 261 738 546 318 526 201 257

Its Correct output is:
998996992985969964959309168758738698568508458268198168098097907777767707687627567387367326936816806776706636526396266266
2456155755554548546535532526507503456440434214204083983973783433633233231830229626125725024522421221120420119418116153151451210910
998996992985969964959309168758738698568508458268198168098097907777767707687627567387367326936816806776706636526396266266
2456155755554548546535532526507503456440434214204083983973783433633233231830229626125725024522421221120420119418116151531451210910

998996992985969964959309168758738698568508458268198168098097907777767707687627567387367326936816806776706636526396266266
2456155755554548546535532526507503456440434214204083983973783433633233231830229626125725024522421221120420119418116153151451210910
*/